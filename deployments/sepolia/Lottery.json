{
  "address": "0x6cAF24f45B68ad8b4476819Cebe96b902b7D8470",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOPEN",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playerCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85efe00a955730d652df27f3771410dbb1f5498a4fbe461f0f48b2bbfed3042f",
  "receipt": {
    "to": null,
    "from": "0xb3d0D8a62494123C40acc5E60e82C09499C35be1",
    "contractAddress": "0x6cAF24f45B68ad8b4476819Cebe96b902b7D8470",
    "transactionIndex": 22,
    "gasUsed": "1223394",
    "logsBloom": "0x
    "blockHash": "0x7d3a04302599328bf6bb7c3c971bce8b98064f3ac9d493522961f304e8ee6818",
    "transactionHash": "0x85efe00a955730d652df27f3771410dbb1f5498a4fbe461f0f48b2bbfed3042f",
    "logs": [],
    "blockNumber": 4505623,
    "cumulativeGasUsed": "3550380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "6081",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "dfa56a3382d893bc098fe8eb8943d489",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOPEN\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"state\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\\\";\\r\\n\\r\\nerror Lottery__NotEnoughEthEntered();\\r\\nerror Lottery__TransferFailed();\\r\\nerror Lottery__NotOPEN();\\r\\nerror Lottery__UpkeepNotNeeded(\\r\\n    uint256 balance,\\r\\n    uint256 playerCount,\\r\\n    uint256 state\\r\\n);\\r\\n\\r\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    enum LotteryState {\\r\\n        OPEN,\\r\\n        CLOSED\\r\\n    }\\r\\n\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    address private s_recentWinner;\\r\\n    LotteryState private s_LotteryState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    event LotteryEnter(address indexed player);\\r\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_LotteryState = LotteryState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterLottery() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Lottery__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (s_LotteryState != LotteryState.OPEN) {\\r\\n            revert Lottery__NotOPEN();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit LotteryEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /* requestId */,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_LotteryState = LotteryState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Lottery__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkdata*/\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isOpen = (LotteryState.OPEN == s_LotteryState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = (address(this).balance > 0);\\r\\n\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n        return (upkeepNeeded, \\\"0x0\\\");\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upKeepNeeded) {\\r\\n            revert Lottery__UpkeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_LotteryState)\\r\\n            );\\r\\n        }\\r\\n        s_LotteryState = LotteryState.CLOSED;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATION,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedLotteryWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getLotteryState() public view returns (LotteryState) {\\r\\n        return s_LotteryState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATION;\\r\\n    }\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe86837021edc3a876d5a73f2022a750645a9d11ee46480403215f41c723c6c82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001874380380620018748339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460c081815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426002819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160601c60c05160e0516101005160c01c6101205160e01c6101405161148d620003e760003960008181610693015261073c0152600061051f015260006104fc015260006104db0152600081816102fa01526107620152600061049f0152600081816103200152610374015261148d6000f3fe6080604052600436106100c25760003560e01c8063565429de1161007f5780636e04ff0d116100595780636e04ff0d1461024657806391ad27b414610284578063c1af5785146102af578063e55ae4e8146102b9576100c2565b8063565429de146101c55780635f1b0fd8146101f05780636b68c03c1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190611093565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610e6c565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190611093565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610d7c565b6103e8565b005b34801561017b57600080fd5b506101846105e7565b6040516101919190610fb1565b60405180910390f35b3480156101a657600080fd5b506101af610611565b6040516101bc9190611093565b60405180910390f35b3480156101d157600080fd5b506101da610620565b6040516101e79190611093565b60405180910390f35b3480156101fc57600080fd5b5061020561062c565b6040516102129190611093565b60405180910390f35b34801561022757600080fd5b50610230610639565b60405161023d9190611078565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190610dc9565b610650565b60405161027b929190610ff5565b60405180910390f35b34801561029057600080fd5b50610299610738565b6040516102a69190611093565b60405180910390f35b6102b7610760565b005b3480156102c557600080fd5b506102e060048036038101906102db9190610e12565b6108cf565b6040516102ed9190610fb1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190610fcc565b60405180910390fd5b6103da8282610916565b5050565b6000600254905090565b600061040260405180602001604052806000815250610650565b509050806104715747600080549050600160149054906101000a900460ff1660018111156104335761043261136d565b5b6040517f6e195f25000000000000000000000000000000000000000000000000000000008152600401610468939291906110ae565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104965761049561136d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610560959493929190611025565b602060405180830381600087803b15801561057a57600080fd5b505af115801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190610e3f565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106785761067761136d565b5b6000600181111561068c5761068b61136d565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106c0919061118e565b119050600080600080549050119050600080471190508380156106e05750825b80156106e95750815b80156106f25750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107ba576040517f3e8f808800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107ce576107cd61136d565b5b600160149054906101000a900460ff1660018111156107f0576107ef61136d565b5b14610827576040517f4b81a86c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008082815481106108e4576108e361139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106109315761093061139c565b5b602002602001015161094391906112de565b9050600080828154811061095a5761095961139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ee576109ed61136d565b5b0217905550600067ffffffffffffffff811115610a0e57610a0d6113cb565b5b604051908082528060200260200182016040528015610a3c5781602001602082028036833780820191505090505b5060009080519060200190610a52929190610b47565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8090610f9c565b60006040518083038185875af1925050503d8060008114610abd576040519150601f19603f3d011682016040523d82523d6000602084013e610ac2565b606091505b5050905080610afd576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc0579160200282015b82811115610bbf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b67565b5b509050610bcd9190610bd1565b5090565b5b80821115610bea576000816000905550600101610bd2565b5090565b6000610c01610bfc8461110a565b6110e5565b90508083825260208201905082856020860282011115610c2457610c23611404565b5b60005b85811015610c545781610c3a8882610d52565b845260208401935060208301925050600181019050610c27565b5050509392505050565b6000610c71610c6c84611136565b6110e5565b905082815260208101848484011115610c8d57610c8c611409565b5b610c9884828561126b565b509392505050565b600082601f830112610cb557610cb46113ff565b5b8135610cc5848260208601610bee565b91505092915050565b60008083601f840112610ce457610ce36113ff565b5b8235905067ffffffffffffffff811115610d0157610d006113fa565b5b602083019150836001820283011115610d1d57610d1c611404565b5b9250929050565b600082601f830112610d3957610d386113ff565b5b8135610d49848260208601610c5e565b91505092915050565b600081359050610d6181611440565b92915050565b600081519050610d7681611440565b92915050565b60008060208385031215610d9357610d92611413565b5b600083013567ffffffffffffffff811115610db157610db061140e565b5b610dbd85828601610cce565b92509250509250929050565b600060208284031215610ddf57610dde611413565b5b600082013567ffffffffffffffff811115610dfd57610dfc61140e565b5b610e0984828501610d24565b91505092915050565b600060208284031215610e2857610e27611413565b5b6000610e3684828501610d52565b91505092915050565b600060208284031215610e5557610e54611413565b5b6000610e6384828501610d67565b91505092915050565b60008060408385031215610e8357610e82611413565b5b6000610e9185828601610d52565b925050602083013567ffffffffffffffff811115610eb257610eb161140e565b5b610ebe85828601610ca0565b9150509250929050565b610ed1816111c2565b82525050565b610ee0816111d4565b82525050565b610eef816111e0565b82525050565b6000610f0082611167565b610f0a8185611172565b9350610f1a81856020860161127a565b610f2381611418565b840191505092915050565b610f3781611259565b82525050565b6000610f4a600083611183565b9150610f5582611429565b600082019050919050565b610f69816111fd565b82525050565b610f788161122b565b82525050565b610f8781611235565b82525050565b610f9681611245565b82525050565b6000610fa782610f3d565b9150819050919050565b6000602082019050610fc66000830184610ec8565b92915050565b6000604082019050610fe16000830185610ec8565b610fee6020830184610ec8565b9392505050565b600060408201905061100a6000830185610ed7565b818103602083015261101c8184610ef5565b90509392505050565b600060a08201905061103a6000830188610ee6565b6110476020830187610f8d565b6110546040830186610f60565b6110616060830185610f7e565b61106e6080830184610f7e565b9695505050505050565b600060208201905061108d6000830184610f2e565b92915050565b60006020820190506110a86000830184610f6f565b92915050565b60006060820190506110c36000830186610f6f565b6110d06020830185610f6f565b6110dd6040830184610f6f565b949350505050565b60006110ef611100565b90506110fb82826112ad565b919050565b6000604051905090565b600067ffffffffffffffff821115611125576111246113cb565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611151576111506113cb565b5b61115a82611418565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111998261122b565b91506111a48361122b565b9250828210156111b7576111b661130f565b5b828203905092915050565b60006111cd8261120b565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111f88261142c565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611264826111ea565b9050919050565b82818337600083830152505050565b60005b8381101561129857808201518184015260208101905061127d565b838111156112a7576000848401525b50505050565b6112b682611418565b810181811067ffffffffffffffff821117156112d5576112d46113cb565b5b80604052505050565b60006112e98261122b565b91506112f48361122b565b9250826113045761130361133e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061143d5761143c61136d565b5b50565b6114498161122b565b811461145457600080fd5b5056fea2646970667358221220c4ebfe65a7d08710ea63e78a4743b654e2ff0b8b8cd13f9b601e3f7a136a673564736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063565429de1161007f5780636e04ff0d116100595780636e04ff0d1461024657806391ad27b414610284578063c1af5785146102af578063e55ae4e8146102b9576100c2565b8063565429de146101c55780635f1b0fd8146101f05780636b68c03c1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190611093565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610e6c565b61031e565b005b34801561012757600080fd5b506101306103de565b60405161013d9190611093565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610d7c565b6103e8565b005b34801561017b57600080fd5b506101846105e7565b6040516101919190610fb1565b60405180910390f35b3480156101a657600080fd5b506101af610611565b6040516101bc9190611093565b60405180910390f35b3480156101d157600080fd5b506101da610620565b6040516101e79190611093565b60405180910390f35b3480156101fc57600080fd5b5061020561062c565b6040516102129190611093565b60405180910390f35b34801561022757600080fd5b50610230610639565b60405161023d9190611078565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190610dc9565b610650565b60405161027b929190610ff5565b60405180910390f35b34801561029057600080fd5b50610299610738565b6040516102a69190611093565b60405180910390f35b6102b7610760565b005b3480156102c557600080fd5b506102e060048036038101906102db9190610e12565b6108cf565b6040516102ed9190610fb1565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c7929190610fcc565b60405180910390fd5b6103da8282610916565b5050565b6000600254905090565b600061040260405180602001604052806000815250610650565b509050806104715747600080549050600160149054906101000a900460ff1660018111156104335761043261136d565b5b6040517f6e195f25000000000000000000000000000000000000000000000000000000008152600401610468939291906110ae565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156104965761049561136d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610560959493929190611025565b602060405180830381600087803b15801561057a57600080fd5b505af115801561058e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b29190610e3f565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60008080549050905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff1660018111156106785761067761136d565b5b6000600181111561068c5761068b61136d565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106c0919061118e565b119050600080600080549050119050600080471190508380156106e05750825b80156106e95750815b80156106f25750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f00000000000000000000000000000000000000000000000000000000000000003410156107ba576040517f3e8f808800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156107ce576107cd61136d565b5b600160149054906101000a900460ff1660018111156107f0576107ef61136d565b5b14610827576040517f4b81a86c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b60008082815481106108e4576108e361139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050826000815181106109315761093061139c565b5b602002602001015161094391906112de565b9050600080828154811061095a5761095961139c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff021916908360018111156109ee576109ed61136d565b5b0217905550600067ffffffffffffffff811115610a0e57610a0d6113cb565b5b604051908082528060200260200182016040528015610a3c5781602001602082028036833780820191505090505b5060009080519060200190610a52929190610b47565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8090610f9c565b60006040518083038185875af1925050503d8060008114610abd576040519150601f19603f3d011682016040523d82523d6000602084013e610ac2565b606091505b5050905080610afd576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc0579160200282015b82811115610bbf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b67565b5b509050610bcd9190610bd1565b5090565b5b80821115610bea576000816000905550600101610bd2565b5090565b6000610c01610bfc8461110a565b6110e5565b90508083825260208201905082856020860282011115610c2457610c23611404565b5b60005b85811015610c545781610c3a8882610d52565b845260208401935060208301925050600181019050610c27565b5050509392505050565b6000610c71610c6c84611136565b6110e5565b905082815260208101848484011115610c8d57610c8c611409565b5b610c9884828561126b565b509392505050565b600082601f830112610cb557610cb46113ff565b5b8135610cc5848260208601610bee565b91505092915050565b60008083601f840112610ce457610ce36113ff565b5b8235905067ffffffffffffffff811115610d0157610d006113fa565b5b602083019150836001820283011115610d1d57610d1c611404565b5b9250929050565b600082601f830112610d3957610d386113ff565b5b8135610d49848260208601610c5e565b91505092915050565b600081359050610d6181611440565b92915050565b600081519050610d7681611440565b92915050565b60008060208385031215610d9357610d92611413565b5b600083013567ffffffffffffffff811115610db157610db061140e565b5b610dbd85828601610cce565b92509250509250929050565b600060208284031215610ddf57610dde611413565b5b600082013567ffffffffffffffff811115610dfd57610dfc61140e565b5b610e0984828501610d24565b91505092915050565b600060208284031215610e2857610e27611413565b5b6000610e3684828501610d52565b91505092915050565b600060208284031215610e5557610e54611413565b5b6000610e6384828501610d67565b91505092915050565b60008060408385031215610e8357610e82611413565b5b6000610e9185828601610d52565b925050602083013567ffffffffffffffff811115610eb257610eb161140e565b5b610ebe85828601610ca0565b9150509250929050565b610ed1816111c2565b82525050565b610ee0816111d4565b82525050565b610eef816111e0565b82525050565b6000610f0082611167565b610f0a8185611172565b9350610f1a81856020860161127a565b610f2381611418565b840191505092915050565b610f3781611259565b82525050565b6000610f4a600083611183565b9150610f5582611429565b600082019050919050565b610f69816111fd565b82525050565b610f788161122b565b82525050565b610f8781611235565b82525050565b610f9681611245565b82525050565b6000610fa782610f3d565b9150819050919050565b6000602082019050610fc66000830184610ec8565b92915050565b6000604082019050610fe16000830185610ec8565b610fee6020830184610ec8565b9392505050565b600060408201905061100a6000830185610ed7565b818103602083015261101c8184610ef5565b90509392505050565b600060a08201905061103a6000830188610ee6565b6110476020830187610f8d565b6110546040830186610f60565b6110616060830185610f7e565b61106e6080830184610f7e565b9695505050505050565b600060208201905061108d6000830184610f2e565b92915050565b60006020820190506110a86000830184610f6f565b92915050565b60006060820190506110c36000830186610f6f565b6110d06020830185610f6f565b6110dd6040830184610f6f565b949350505050565b60006110ef611100565b90506110fb82826112ad565b919050565b6000604051905090565b600067ffffffffffffffff821115611125576111246113cb565b5b602082029050602081019050919050565b600067ffffffffffffffff821115611151576111506113cb565b5b61115a82611418565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111998261122b565b91506111a48361122b565b9250828210156111b7576111b661130f565b5b828203905092915050565b60006111cd8261120b565b9050919050565b60008115159050919050565b6000819050919050565b60008190506111f88261142c565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611264826111ea565b9050919050565b82818337600083830152505050565b60005b8381101561129857808201518184015260208101905061127d565b838111156112a7576000848401525b50505050565b6112b682611418565b810181811067ffffffffffffffff821117156112d5576112d46113cb565b5b80604052505050565b60006112e98261122b565b91506112f48361122b565b9250826113045761130361133e565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061143d5761143c61136d565b5b50565b6114498161122b565b811461145457600080fd5b5056fea2646970667358221220c4ebfe65a7d08710ea63e78a4743b654e2ff0b8b8cd13f9b601e3f7a136a673564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 245,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 262,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_LotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)237"
      },
      {
        "astId": 264,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)237": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}